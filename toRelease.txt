//two step deploy to maven central
//////////////////////////////////

mvn clean deploy -s /home/nate/MavenCentral/settings.xml

mvn nexus-staging:release -s /home/nate/MavenCentral/settings.xml

//TODO: make a docker image to do this
* build on MVN and add git support.
* must hold volume to keys
* must clone latest code fresh (this keeps us from releasing current work)
* must run deploy
* must run release if deploy succeeded

new bash: (test next time)..

rm -rf workingDeploy
mkdir workingDeploy
cd workingDeploy
set +e
git clone https://github.com/oci-pronghorn/Pronghorn.git
mvn clean deploy -s /home/nate/MavenCentral/settings.xml
mvn nexus-staging:release -s /home/nate/MavenCentral/settings.xml
set -e


//////////////////////////
//move old project into subfolder of itself
//////////////////////////
cd old-project
mkdir old-project
git mv !(old-project) old-project
git commit -a -S -m “Moving old project into its own subdirectory”

//////////////////////////
//merge old project into new project with history
//////////////////////////
cd ../new-project
git remote add old-project ../old-project
git fetch old-project
git checkout -b feature/merge-old-project
git merge -S --allow-unrelated-histories old-project/master
git push origin feature/merge-old-project
git remote rm old-project


////////////////////////////////
//link a project into another (submodules)
/////////////////////////////

$ git submodule add https://github.com/chaconinc/DbConnector
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
$ git commit
$ git push
/////NOTE: clone will not get sub folder and user must call
git submodule init
git submodule update




